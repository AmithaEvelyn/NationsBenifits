@page "/"

<PageTitle>Blazor Tic-Tac-Toe</PageTitle>

<div class="game-container">
    <h1>Tic-Tac-Toe Game</h1>
    
    <div class="game-info">
        @if (!gameEnded)
        {
            <h2>Current Player: @currentPlayer</h2>
        }
        else
        {
            <h2 class="@(winner == "Draw" ? "draw" : "winner")">
                @if (winner == "Draw")
                {
                    <span>It's a Draw!</span>
                }
                else
                {
                    <span>@winner Wins!</span>
                }
            </h2>
        }
    </div>

    <div class="game-board">
        @for (int i = 0; i < 9; i++)
        {
            int index = i; // Capture for lambda
            <button class="cell @GetCellClass(index)" 
                    @onclick="() => MakeMove(index)" 
                    disabled="@(board[index] != "" || gameEnded)">
                @board[index]
            </button>
        }
    </div>

    <div class="game-controls">
        <button class="reset-btn" @onclick="ResetGame">New Game</button>
    </div>

    <div class="score-board">
        <div class="score">
            <h3>Score</h3>
            <p>X: @xWins</p>
            <p>O: @oWins</p>
            <p>Draws: @draws</p>
        </div>
    </div>
</div>

<style>
    .game-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 500px;
        margin: 0 auto;
        padding: 20px;
    }

    h1 {
        color: #333;
        margin-bottom: 30px;
        text-align: center;
    }

    .game-info {
        margin-bottom: 20px;
        text-align: center;
    }

    .game-info h2 {
        margin: 0;
        padding: 10px 20px;
        border-radius: 8px;
        background: #f0f0f0;
        color: #333;
    }

    .winner {
        background: #4CAF50 !important;
        color: white !important;
    }

    .draw {
        background: #FF9800 !important;
        color: white !important;
    }

    .game-board {
        display: grid;
        grid-template-columns: repeat(3, 100px);
        grid-template-rows: repeat(3, 100px);
        gap: 4px;
        margin: 20px 0;
        background: #333;
        border-radius: 8px;
        padding: 4px;
    }

    .cell {
        background: white;
        border: none;
        font-size: 2rem;
        font-weight: bold;
        cursor: pointer;
        border-radius: 4px;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .cell:hover:not(:disabled) {
        background: #f0f0f0;
        transform: scale(1.05);
    }

    .cell:disabled {
        cursor: not-allowed;
    }

    .cell.x {
        color: #2196F3;
    }

    .cell.o {
        color: #F44336;
    }

    .cell.winning {
        background: #4CAF50 !important;
        color: white !important;
    }

    .game-controls {
        margin: 20px 0;
    }

    .reset-btn {
        background: #2196F3;
        color: white;
        border: none;
        padding: 12px 24px;
        font-size: 1rem;
        border-radius: 6px;
        cursor: pointer;
        transition: background 0.2s ease;
    }

    .reset-btn:hover {
        background: #1976D2;
    }

    .score-board {
        margin-top: 20px;
        text-align: center;
    }

    .score {
        background: #f9f9f9;
        padding: 20px;
        border-radius: 8px;
        border: 1px solid #ddd;
    }

    .score h3 {
        margin: 0 0 15px 0;
        color: #333;
    }

    .score p {
        margin: 5px 0;
        font-size: 1.1rem;
        color: #666;
    }
</style>

@code {
    private string[] board = new string[9];
    private string currentPlayer = "X";
    private bool gameEnded = false;
    private string winner = "";
    private int[] winningLine = new int[0];
    
    // Score tracking
    private int xWins = 0;
    private int oWins = 0;
    private int draws = 0;

    protected override void OnInitialized()
    {
        ResetBoard();
    }

    private void MakeMove(int index)
    {
        if (board[index] == "" && !gameEnded)
        {
            board[index] = currentPlayer;
            
            if (CheckWin())
            {
                winner = currentPlayer;
                gameEnded = true;
                if (currentPlayer == "X")
                    xWins++;
                else
                    oWins++;
            }
            else if (IsBoardFull())
            {
                winner = "Draw";
                gameEnded = true;
                draws++;
            }
            else
            {
                currentPlayer = currentPlayer == "X" ? "O" : "X";
            }
        }
    }

    private bool CheckWin()
    {
        int[,] winConditions = {
            {0, 1, 2}, {3, 4, 5}, {6, 7, 8}, // Rows
            {0, 3, 6}, {1, 4, 7}, {2, 5, 8}, // Columns  
            {0, 4, 8}, {2, 4, 6}             // Diagonals
        };

        for (int i = 0; i < winConditions.GetLength(0); i++)
        {
            int a = winConditions[i, 0];
            int b = winConditions[i, 1];
            int c = winConditions[i, 2];

            if (board[a] != "" && board[a] == board[b] && board[b] == board[c])
            {
                winningLine = new int[] { a, b, c };
                return true;
            }
        }
        return false;
    }

    private bool IsBoardFull()
    {
        return board.All(cell => cell != "");
    }

    private void ResetGame()
    {
        ResetBoard();
    }

    private void ResetBoard()
    {
        for (int i = 0; i < board.Length; i++)
        {
            board[i] = "";
        }
        currentPlayer = "X";
        gameEnded = false;
        winner = "";
        winningLine = new int[0];
    }

    private string GetCellClass(int index)
    {
        string classes = "";
        
        if (board[index] == "X")
            classes += "x ";
        else if (board[index] == "O")
            classes += "o ";
            
        if (winningLine.Contains(index))
            classes += "winning ";
            
        return classes.Trim();
    }
}